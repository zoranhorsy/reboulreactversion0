/**
 * Script de r√©paration d'urgence des adresses manquantes
 * 
 * Pour ex√©cuter ce script: 
 * node backend/scripts/fix-addresses.js
 */

require('dotenv').config();
const db = require('../db');

async function fixMissingAddresses() {
  const client = await db.pool.connect();
  console.log('üîÑ Connexion √† la base de donn√©es √©tablie');
  
  try {
    await client.query('BEGIN');
    console.log('üîÑ D√©but de la transaction');
    
    // R√©cup√©rer toutes les commandes
    const result = await client.query('SELECT id, order_number, shipping_info FROM orders');
    console.log(`üìã Trouv√© ${result.rows.length} commandes √† v√©rifier`);
    
    let updatedCount = 0;
    
    for (const order of result.rows) {
      // Cr√©er une version mise √† jour des infos de livraison
      const currentShippingInfo = order.shipping_info || {};
      
      // D√©terminer si l'adresse a besoin d'√™tre r√©par√©e
      const needsRepair = !currentShippingInfo.hasAddress || 
                         !currentShippingInfo.isValid || 
                         !currentShippingInfo.addressType ||
                         !currentShippingInfo.address;
      
      if (needsRepair) {
        console.log(`üîÑ R√©paration de l'adresse pour la commande #${order.order_number}`);
        
        // Construire une nouvelle version des informations d'exp√©dition
        const updatedShippingInfo = {
          ...currentShippingInfo,
          hasAddress: true,
          isValid: true,
          addressType: 'shipping',
          address: currentShippingInfo.address || "Non sp√©cifi√©e",
          deliveryType: currentShippingInfo.deliveryType || "standard"
        };
        
        // Mettre √† jour la commande
        await client.query(
          'UPDATE orders SET shipping_info = $1 WHERE id = $2',
          [updatedShippingInfo, order.id]
        );
        
        updatedCount++;
      }
    }
    
    await client.query('COMMIT');
    console.log(`‚úÖ ${updatedCount} commandes ont √©t√© mises √† jour avec succ√®s sur ${result.rows.length} commandes`);
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Erreur lors de la mise √† jour des adresses:', error);
  } finally {
    client.release();
    // Fermer la connexion √† la base de donn√©es
    db.pool.end();
  }
}

// Ex√©cuter la fonction
fixMissingAddresses()
  .then(() => {
    console.log('‚úÖ Script termin√©');
  })
  .catch(err => {
    console.error('‚ùå Erreur non g√©r√©e:', err);
    process.exit(1);
  }); 