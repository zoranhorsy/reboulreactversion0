{
  "version": 3,
  "sources": ["../../src/workers/filterWorker.ts"],
  "sourcesContent": ["// Types\ntype FilterMessage = {\n  type: 'FILTER_PRODUCTS';\n  taskId: string;\n  products: Product[];\n  options: FilterOptions;\n};\n\ntype SortMessage = {\n  type: 'SORT_PRODUCTS';\n  taskId: string;\n  products: Product[];\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n};\n\ntype Product = {\n  id: string;\n  name: string;\n  price: number;\n  category_id?: string | number;\n  brand_id?: string | number;\n  sizes?: string[];\n  colors?: string[];\n  inStock?: boolean;\n  variants?: Array<{\n    size?: string;\n    color?: string;\n    stock?: number;\n  }>;\n  [key: string]: any;\n};\n\ntype FilterOptions = {\n  categories?: string[];\n  brands?: string[];\n  priceRange?: { min: number; max: number };\n  sizes?: string[];\n  colors?: string[];\n  inStock?: boolean;\n  searchTerm?: string;\n};\n\n// Variable pour suivre les performances\nlet startTime = 0;\n\n// Fonction de filtrage\nfunction filterProducts(products: Product[], options: FilterOptions): Product[] {\n  return products.filter(product => {\n    // Filtre par cat\u00E9gorie\n    if (options.categories?.length) {\n      const categoryId = String(product.category_id || '');\n      if (!options.categories.some(cat => cat === categoryId)) {\n        return false;\n      }\n    }\n\n    // Filtre par marque\n    if (options.brands?.length) {\n      const brandId = String(product.brand_id || '');\n      if (!options.brands.some(brand => brand === brandId)) {\n        return false;\n      }\n    }\n\n    // Filtre par prix\n    if (options.priceRange) {\n      if (product.price < options.priceRange.min || product.price > options.priceRange.max) {\n        return false;\n      }\n    }\n\n    // Filtre par taille\n    if (options.sizes?.length && product.variants) {\n      const productSizes = product.variants.map(v => v.size).filter(Boolean) as string[];\n      if (!options.sizes.some(size => productSizes.includes(size))) {\n        return false;\n      }\n    }\n\n    // Filtre par couleur\n    if (options.colors?.length && product.variants) {\n      const productColors = product.variants.map(v => v.color?.toLowerCase()).filter(Boolean) as string[];\n      if (!options.colors.some(color => productColors.includes(color.toLowerCase()))) {\n        return false;\n      }\n    }\n\n    // Filtre par disponibilit\u00E9\n    if (options.inStock !== undefined) {\n      // Si le produit a des variantes, v\u00E9rifier si au moins une est en stock\n      if (product.variants && product.variants.length > 0) {\n        const hasStock = product.variants.some(v => (v.stock || 0) > 0);\n        if (options.inStock !== hasStock) return false;\n      } else if (options.inStock !== !!product.inStock) {\n        return false;\n      }\n    }\n\n    // Filtre par terme de recherche\n    if (options.searchTerm) {\n      const searchLower = options.searchTerm.toLowerCase();\n      return (\n        product.name.toLowerCase().includes(searchLower) ||\n        (product.brand && product.brand.toLowerCase().includes(searchLower)) ||\n        (product.description && product.description.toLowerCase().includes(searchLower))\n      );\n    }\n\n    return true;\n  });\n}\n\n// Fonction de tri\nfunction sortProducts(products: Product[], sortBy: string, sortOrder: 'asc' | 'desc'): Product[] {\n  // Cloner le tableau pour ne pas modifier l'original\n  const clonedProducts = [...products];\n  const sortFactor = sortOrder === 'asc' ? 1 : -1;\n\n  return clonedProducts.sort((a, b) => {\n    if (sortBy === 'price') {\n      return (a.price - b.price) * sortFactor;\n    } else if (sortBy === 'name') {\n      return a.name.localeCompare(b.name) * sortFactor;\n    } else if (sortBy === 'newest') {\n      const dateA = new Date(a.created_at || 0).getTime();\n      const dateB = new Date(b.created_at || 0).getTime();\n      return (dateB - dateA); // Toujours du plus r\u00E9cent au plus ancien\n    } else if (sortBy === 'popular') {\n      const popularityA = a.popularity || 0;\n      const popularityB = b.popularity || 0;\n      return (popularityB - popularityA); // Toujours du plus populaire au moins populaire\n    }\n    return 0;\n  });\n}\n\n// Gestionnaire de messages\nself.onmessage = (event: MessageEvent) => {\n  const message = event.data;\n  startTime = performance.now();\n\n  try {\n    switch (message.type) {\n      case 'FILTER_PRODUCTS': {\n        const result = filterProducts(message.products, message.options);\n        const processingTime = performance.now() - startTime;\n        \n        self.postMessage({\n          type: 'FILTER_SUCCESS',\n          taskId: message.taskId,\n          result,\n          processingTime\n        });\n        break;\n      }\n      case 'SORT_PRODUCTS': {\n        const result = sortProducts(message.products, message.sortBy, message.sortOrder);\n        const processingTime = performance.now() - startTime;\n        \n        self.postMessage({\n          type: 'SORT_SUCCESS',\n          taskId: message.taskId,\n          result,\n          processingTime\n        });\n        break;\n      }\n      default:\n        self.postMessage({\n          type: 'ERROR',\n          taskId: message.taskId || 'unknown',\n          error: 'Type de message non support\u00E9'\n        });\n    }\n  } catch (error) {\n    self.postMessage({\n      type: 'ERROR',\n      taskId: message.taskId || 'unknown',\n      error: error instanceof Error ? error.message : 'Erreur inconnue'\n    });\n  }\n}; "],
  "mappings": "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",
  "names": ["require_filterWorker", "__commonJSMin", "startTime", "filterProducts", "products", "options", "product", "categoryId", "cat", "brandId", "brand", "productSizes", "v", "size", "productColors", "color", "hasStock", "searchLower", "sortProducts", "sortBy", "sortOrder", "clonedProducts", "sortFactor", "b", "dateA", "popularityA", "event", "message", "result", "processingTime", "error"]
}
