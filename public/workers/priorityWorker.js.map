{
  "version": 3,
  "sources": ["../../src/workers/priorityWorker.ts"],
  "sourcesContent": ["// Types\ntype Priority = 'high' | 'medium' | 'low';\n\ntype Task = {\n  id: string;\n  priority: Priority;\n  data: any;\n  type: string;\n};\n\ntype QueueMessage = {\n  type: 'ADD_TASK' | 'PROCESS_TASKS' | 'CLEAR_QUEUE';\n  task?: Task;\n};\n\ntype TaskResult = {\n  success: boolean;\n  data: any;\n};\n\n// File d'attente des t\u00E2ches\nconst taskQueue: Task[] = [];\n\n// Fonction de tri des t\u00E2ches par priorit\u00E9\nfunction sortTasksByPriority(tasks: Task[]): Task[] {\n  const priorityOrder = { high: 0, medium: 1, low: 2 };\n  return [...tasks].sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);\n}\n\n// Traitement sp\u00E9cifique par type de t\u00E2che\nasync function executeTask(task: Task): Promise<TaskResult> {\n  switch (task.type) {\n    case 'IMAGE_OPTIMIZATION':\n      return processImageOptimization(task.data);\n    case 'DATA_AGGREGATION':\n      return processDataAggregation(task.data);\n    case 'PRODUCT_RECOMMENDATIONS':\n      return processProductRecommendations(task.data);\n    case 'USER_PREFERENCES':\n      return processUserPreferences(task.data);\n    default:\n      // Pour les types non impl\u00E9ment\u00E9s, on retourne une simulation\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return {\n        success: true,\n        data: `T\u00E2che ${task.id} de type ${task.type} trait\u00E9e avec succ\u00E8s`\n      };\n  }\n}\n\n// Traitement d'optimisation d'image\nasync function processImageOptimization(data: any): Promise<TaskResult> {\n  try {\n    // Simulation du traitement d'image\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return {\n      success: true,\n      data: {\n        url: data.url,\n        optimized: true,\n        size: data.size ? Math.floor(data.size * 0.7) : 100, // Simulation r\u00E9duction 30%\n        format: data.format || 'webp'\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      data: error instanceof Error ? error.message : 'Erreur inconnue'\n    };\n  }\n}\n\n// Traitement d'agr\u00E9gation de donn\u00E9es\nasync function processDataAggregation(data: any): Promise<TaskResult> {\n  try {\n    // Simulation d'agr\u00E9gation de donn\u00E9es\n    await new Promise(resolve => setTimeout(resolve, 200));\n    \n    // Si on a un tableau, on simule un regroupement\n    if (Array.isArray(data.items)) {\n      const result = data.items.reduce((acc: any, item: any) => {\n        const key = item[data.groupBy || 'id'];\n        if (!acc[key]) {\n          acc[key] = [];\n        }\n        acc[key].push(item);\n        return acc;\n      }, {});\n      \n      return {\n        success: true,\n        data: { \n          aggregated: true,\n          result,\n          count: Object.keys(result).length\n        }\n      };\n    }\n    \n    return {\n      success: true,\n      data: { \n        aggregated: true,\n        message: 'Donn\u00E9es agr\u00E9g\u00E9es avec succ\u00E8s'\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      data: error instanceof Error ? error.message : 'Erreur inconnue'\n    };\n  }\n}\n\n// Traitement de recommandations produits\nasync function processProductRecommendations(data: any): Promise<TaskResult> {\n  try {\n    // Simulation de calcul de recommandations\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    if (data.productId) {\n      // Simuler des recommandations bas\u00E9es sur un produit\n      return {\n        success: true,\n        data: {\n          recommendations: [\n            { id: 'rec1', score: 0.92, reason: 'similar' },\n            { id: 'rec2', score: 0.85, reason: 'bought_together' },\n            { id: 'rec3', score: 0.78, reason: 'viewed_also_viewed' }\n          ],\n          source: `Product ${data.productId}`\n        }\n      };\n    } else if (data.userId) {\n      // Simuler des recommandations bas\u00E9es sur un utilisateur\n      return {\n        success: true,\n        data: {\n          recommendations: [\n            { id: 'urec1', score: 0.89, reason: 'purchase_history' },\n            { id: 'urec2', score: 0.74, reason: 'viewed_recently' },\n            { id: 'urec3', score: 0.67, reason: 'wishlist' }\n          ],\n          source: `User ${data.userId}`\n        }\n      };\n    }\n    \n    return {\n      success: true,\n      data: {\n        recommendations: [],\n        message: 'Aucun contexte pour g\u00E9n\u00E9rer des recommandations'\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      data: error instanceof Error ? error.message : 'Erreur inconnue'\n    };\n  }\n}\n\n// Traitement des pr\u00E9f\u00E9rences utilisateur\nasync function processUserPreferences(data: any): Promise<TaskResult> {\n  try {\n    // Simulation de traitement des pr\u00E9f\u00E9rences\n    await new Promise(resolve => setTimeout(resolve, 150));\n    \n    return {\n      success: true,\n      data: {\n        processed: true,\n        preferences: { ...data },\n        recommendations: {\n          categories: data.categories || [],\n          brands: data.brands || []\n        }\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      data: error instanceof Error ? error.message : 'Erreur inconnue'\n    };\n  }\n}\n\n// Fonction de traitement des t\u00E2ches\nasync function processTasks(): Promise<void> {\n  if (taskQueue.length === 0) {\n    self.postMessage({ type: 'QUEUE_EMPTY' });\n    return;\n  }\n\n  const sortedTasks = sortTasksByPriority(taskQueue);\n  \n  for (const task of sortedTasks) {\n    try {\n      const result = await executeTask(task);\n      \n      self.postMessage({\n        type: 'TASK_COMPLETE',\n        taskId: task.id,\n        result\n      });\n    } catch (error) {\n      self.postMessage({\n        type: 'TASK_ERROR',\n        taskId: task.id,\n        error: error instanceof Error ? error.message : 'Erreur inconnue'\n      });\n    }\n  }\n\n  // Vider la file d'attente apr\u00E8s traitement\n  taskQueue.length = 0;\n}\n\n// Gestionnaire de messages\nself.onmessage = (event: MessageEvent) => {\n  const message = event.data as QueueMessage;\n\n  try {\n    switch (message.type) {\n      case 'ADD_TASK':\n        if (message.task) {\n          taskQueue.push(message.task);\n          self.postMessage({ type: 'TASK_ADDED', taskId: message.task.id });\n        }\n        break;\n\n      case 'PROCESS_TASKS':\n        processTasks();\n        break;\n\n      case 'CLEAR_QUEUE':\n        taskQueue.length = 0;\n        self.postMessage({ type: 'QUEUE_CLEARED' });\n        break;\n\n      default:\n        self.postMessage({ type: 'ERROR', error: 'Type de message non support\u00E9' });\n    }\n  } catch (error) {\n    self.postMessage({ type: 'ERROR', error: error instanceof Error ? error.message : 'Erreur inconnue' });\n  }\n}; "],
  "mappings": "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",
  "names": ["require_priorityWorker", "__commonJSMin", "taskQueue", "sortTasksByPriority", "tasks", "priorityOrder", "a", "b", "executeTask", "task", "processImageOptimization", "processDataAggregation", "processProductRecommendations", "processUserPreferences", "resolve", "data", "error", "result", "acc", "item", "key", "processTasks", "sortedTasks", "event", "message"]
}
