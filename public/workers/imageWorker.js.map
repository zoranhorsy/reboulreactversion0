{
  "version": 3,
  "sources": ["../../src/workers/imageWorker.ts"],
  "sourcesContent": ["// Types pour les messages du worker\ninterface ImageProcessMessage {\n  type: 'process';\n  imageData: ImageData;\n  options: {\n    width?: number;\n    height?: number;\n    quality?: number;\n    format?: 'webp' | 'avif' | 'jpeg';\n  };\n}\n\ninterface ImageProcessResponse {\n  type: 'process';\n  processedImage: ImageData;\n  error?: string;\n}\n\n// Fonction pour traiter une image\nasync function processImage(imageData: ImageData, options: ImageProcessMessage['options']): Promise<ImageData> {\n  const canvas = new OffscreenCanvas(imageData.width, imageData.height);\n  const ctx = canvas.getContext('2d');\n  \n  if (!ctx) {\n    throw new Error('Impossible de cr\u00E9er le contexte canvas');\n  }\n  \n  // Dessiner l'image sur le canvas\n  ctx.putImageData(imageData, 0, 0);\n  \n  // Appliquer les transformations\n  if (options.width || options.height) {\n    const newWidth = options.width || imageData.width;\n    const newHeight = options.height || imageData.height;\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    ctx.drawImage(canvas, 0, 0, newWidth, newHeight);\n  }\n  \n  // R\u00E9cup\u00E9rer les donn\u00E9es trait\u00E9es\n  return ctx.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n// Gestionnaire de messages\nself.onmessage = async (e: MessageEvent<ImageProcessMessage>) => {\n  const { type, imageData, options } = e.data;\n  \n  try {\n    switch (type) {\n      case 'process':\n        const processedImage = await processImage(imageData, options);\n        self.postMessage({\n          type: 'process',\n          processedImage\n        });\n        break;\n        \n      default:\n        throw new Error(`Type de message non support\u00E9: ${type}`);\n    }\n  } catch (error) {\n    self.postMessage({\n      type: 'process',\n      error: error instanceof Error ? error.message : 'Erreur inconnue'\n    });\n  }\n}; "],
  "mappings": "iFAAA,IAAAA,EAAAC,EAAA,KAmBA,eAAeC,EAAaC,EAAsBC,EAA6D,CAC7G,IAAMC,EAAS,IAAI,gBAAgBF,EAAU,MAAOA,EAAU,MAAM,EAC9DG,EAAMD,EAAO,WAAW,IAAI,EAElC,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,2CAAwC,EAO1D,GAHAA,EAAI,aAAaH,EAAW,EAAG,CAAC,EAG5BC,EAAQ,OAASA,EAAQ,OAAQ,CACnC,IAAMG,EAAWH,EAAQ,OAASD,EAAU,MACtCK,EAAYJ,EAAQ,QAAUD,EAAU,OAC9CE,EAAO,MAAQE,EACfF,EAAO,OAASG,EAChBF,EAAI,UAAUD,EAAQ,EAAG,EAAGE,EAAUC,CAAS,CACjD,CAGA,OAAOF,EAAI,aAAa,EAAG,EAAGD,EAAO,MAAOA,EAAO,MAAM,CAC3D,CAGA,KAAK,UAAY,MAAOI,GAAyC,CAC/D,GAAM,CAAE,KAAAC,EAAM,UAAAP,EAAW,QAAAC,CAAQ,EAAIK,EAAE,KAEvC,GAAI,CACF,OAAQC,EAAM,CACZ,IAAK,UACH,IAAMC,EAAiB,MAAMT,EAAaC,EAAWC,CAAO,EAC5D,KAAK,YAAY,CACf,KAAM,UACN,eAAAO,CACF,CAAC,EACD,MAEF,QACE,MAAM,IAAI,MAAM,oCAAiCD,CAAI,EAAE,CAC3D,CACF,OAASE,EAAO,CACd,KAAK,YAAY,CACf,KAAM,UACN,MAAOA,aAAiB,MAAQA,EAAM,QAAU,iBAClD,CAAC,CACH,CACF",
  "names": ["require_imageWorker", "__commonJSMin", "processImage", "imageData", "options", "canvas", "ctx", "newWidth", "newHeight", "e", "type", "processedImage", "error"]
}
