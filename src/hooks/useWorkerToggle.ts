import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';

/**
 * Hook pour activer/d√©sactiver les Web Workers en fonction d'un param√®tre d'URL
 * 
 * Utilis√© pour les tests de performance afin de comparer l'exp√©rience
 * avec et sans Web Workers.
 * 
 * @returns {boolean} Indique si les Web Workers doivent √™tre utilis√©s
 * 
 * @example
 * // Dans un composant:
 * const useWorkers = useWorkerToggle();
 * 
 * useEffect(() => {
 *   if (useWorkers) {
 *     // Utiliser les Web Workers
 *   } else {
 *     // Utiliser l'impl√©mentation alternative sans Web Workers
 *   }
 * }, [useWorkers]);
 */
export function useWorkerToggle(): boolean {
  const [useWorkers, setUseWorkers] = useState<boolean>(true);
  const searchParams = useSearchParams();
  
  useEffect(() => {
    // V√©rifier si le param√®tre d'URL 'disableWorkers' est pr√©sent
    const disableWorkers = searchParams?.get('disableWorkers');
    
    console.log('üîç useWorkerToggle - V√©rification du param√®tre disableWorkers:', { 
      paramValue: disableWorkers,
      searchParams: Object.fromEntries(searchParams?.entries() || [])
    });
    
    // D√©sactiver les workers si le param√®tre est pr√©sent et a une valeur truthy
    if (disableWorkers === 'true' || disableWorkers === '1') {
      console.info('[WorkerToggle] Web Workers d√©sactiv√©s via param√®tre d\'URL');
      setUseWorkers(false);
      
      // Enregistrer l'√©v√©nement pour les mesures de performance
      if (typeof window !== 'undefined' && window.performance) {
        performance.mark('workers-disabled');
      }
    } else {
      console.info('[WorkerToggle] Web Workers activ√©s (pas de param√®tre disableWorkers)');
      setUseWorkers(true);
    }
  }, [searchParams]);
  
  return useWorkers;
}

export default useWorkerToggle; 